name: ci-benchmark-deploy

on:
  workflow_call:
    inputs:
      appname:
        type: string
        description: 'The name of the application:'
        default: ''
        required: true
      frontend-app:
        type: string
        description: 'The application jar to deploy on the frontent vm:'
        default: ''
        required: true
      backend-app:
        type: string
        description: 'The application jar to deploy on the backend vm:'
        default: ''
        required: false
      client-vm:
        type: string
        description: 'The client vm name:'
        default: ''
        required: true
      client-image:
        type: string
        description: 'The client image name:'
        default: ''
        required: true
      frontend-vm:
        type: string
        description: 'The frontend vm name:'
        default: ''
        required: true
      frontend-image:
        type: string
        description: 'The frontend image name:'
        default: ''
        required: true
      backend-vm:
        type: string
        description: 'The backend vm name:'
        default: ''
        required: false
      backend-image:
        type: string
        description: 'The backend image name:'
        default: ''
        required: false
      protocol:
        type: string
        description: 'The protocol used (H1,H1S,H2,H2C):'
        default: ''
        required: true
      simulations:
        description: 'List of simulation applications:'
        required: true
        type: string
        default: ''
      dependencies:
        description: 'List of gh project dependencies to track:'
        required: true
        type: string
        default: ''
      duration:
        description: 'Test duration (in minutes):'
        required: false
        type: string
        default: '5'
      increment:
        description: 'Gatling increment:'
        required: false
        type: string
        default: '128'
      steps:
        description: 'Gatling steps:'
        required: false
        type: string
        default: '32'
      alert-threshold:
        description: 'Alert threshold like "150%". Percentage indicating how worse the current benchmark result is, e.g: 150% means that an alert happens when current benchmark result is 1.5x worse than previous:'
        required: false
        type: string
        default: '125%'
      force-bench:
        type: boolean
        description: Forces benchmark even if there's no changes
        default: true
        required: false
    outputs:
      changed:
        description: "Some commits have been done since last benchmark"
        value: ${{ jobs.init-benchmark.outputs.changed }}

env:
  SCRIPTS_DIR: ./main-repo/.github/scripts
  PROJECT_ID: ${{ secrets.GCP_PROJECT }}
  FRONTEND_VM: ${{ inputs.frontend-vm }}
  FRONTEND_IMAGE: ${{ inputs.frontend-image }}
  BACKEND_VM: ${{ inputs.backend-vm }}
  BACKEND_IMAGE: ${{ inputs.backend-image }}
  CLIENT_VM: ${{ inputs.client-vm }}
  CLIENT_IMAGE: ${{ inputs.client-image }}
  FRONTEND_APP: ${{ inputs.frontend-app }}
  BACKEND_APP: ${{ inputs.backend-app }}
  APP_NAME: ${{ inputs.appname }}
  PROTOCOL: ${{ inputs.protocol }}
  BUCKET: ${{ vars.BUCKET }}
  ZONE: ${{ vars.ZONE }}
  MACHINE_TYPE: ${{ vars.MACHINE_TYPE }}
  SIMULATIONS: ${{ inputs.simulations || vars.SIMULATIONS }}
  INCREMENT: ${{ inputs.increment || vars.INCREMENT }}
  DURATION: ${{ inputs.duration || vars.DURATION }}
  STEPS: ${{ inputs.steps || vars.STEPS }}
  ALERT_THRESHOLD: ${{ inputs.alert-threshold || vars.ALERT_THRESHOLD }}
  DEPENDENCIES: ${{ inputs.dependencies }}

jobs:

  init-benchmark:
    name: Initialize benchmark
    runs-on: ubuntu-latest
    permissions:
      contents: read
    outputs:
      changed: ${{ steps.check_updated.outputs.CHANGED }}
      commits: ${{ steps.check_updated.outputs.COMMITS }}
      commits_diff: ${{ steps.check_updated.outputs.COMMITS_DIFF }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/checkout@v3
        with:
          ref: 'main'
          path: main-repo
          fetch-depth: 0

      - name: Check for updates
        id: check_updated
        run: |-
          . ${SCRIPTS_DIR}/libs.sh
          git checkout gh-pages
          check_for_new_commits "$DEPENDENCIES" bench/$APP_NAME/Trends/.history $GITHUB_OUTPUT

  run-benchmark:
    name: Deploy benchmark
    needs: init-benchmark
    if: needs.init-benchmark.outputs.changed == 'true' || github.event.inputs.force-bench == 'true'
    runs-on: ubuntu-latest
    permissions:
      contents: read
    env:
      JOB_URL: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
      GH_TOKEN: ${{ github.token }}

    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - uses: actions/checkout@v3
        with:
          ref: 'main'
          path: main-repo
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          java-version: '19'
          distribution: 'temurin'

      # GCP authentication via credentials json (TODO replace by OpenId)
      - id: 'auth'
        uses: 'google-github-actions/auth@v1'
        with:
          credentials_json: ${{ secrets.GCP_CREDENTIALS }}

      # Setup gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v1

      - name: Setup env
        run: |-
          echo "FRONTEND_VM=$(echo $FRONTEND_VM | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "BACKEND_VM=$(echo $BACKEND_VM | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV
          echo "CLIENT_VM=$(echo $CLIENT_VM | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Maven/Gradle Compile
        shell: bash
        run: |-
          env|grep "_VM"
          if [ -f pom.xml ]; then mvn --quiet -B package --file pom.xml; fi
          if [ -f build.gradle ]; then ./gradlew build; fi

      - name: Copy applications to server bucket
        run: |-
          jarfile=$(find . -name "$FRONTEND_APP.jar") 
          gsutil cp $jarfile gs://$BUCKET/apps/;
          if [ -n $BACKEND_APP ]; then
            jarfile=$(find . -name "$BACKEND_APP.jar") 
            gsutil cp $jarfile gs://$BUCKET/apps/;
          fi

      # Create the server VM
      - name: Create frontend/backend servers
        run: |-
          if [ -n $BACKEND_APP ]; then
            echo "Creating backend vm ..."
            gcloud compute instances create-with-container $BACKEND_VM \
              --machine-type=$MACHINE_TYPE \
              --scopes="userinfo-email,storage-rw" \
              --zone=$ZONE \
              --tags=benchmark-tag \
              --network=default \
              --container-image=gcr.io/$PROJECT_ID/$BACKEND_IMAGE:latest \
              --container-restart-policy=never \
              --container-env=PROJECT_ID=$PROJECT_ID,BUCKET=$BUCKET,APP=$BACKEND_APP,PROTOCOL=$PROTOCOL | \
              sed -E 's/[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/xxx.xxx.xxx.xxx/g'
              INTERNAL_IP=`gcloud compute instances list --filter="name=$BACKEND_VM" --format='value(networkInterfaces[0].networkIP)'`
          fi
          echo "Creating frontend vm ..."
          gcloud compute instances create-with-container $FRONTEND_VM \
            --machine-type=$MACHINE_TYPE \
            --scopes="userinfo-email,storage-rw" \
            --zone=$ZONE \
            --tags=benchmark-tag \
            --network=default \
            --container-image=gcr.io/$PROJECT_ID/$FRONTEND_IMAGE:latest \
            --container-restart-policy=never \
            --container-env=PROJECT_ID=$PROJECT_ID,BUCKET=$BUCKET,APP=$FRONTEND_APP,PROTOCOL=$PROTOCOL,BACKEND_HOST=${INTERNAL_IP},BACKEND_PORT=8090 | \
          sed -E 's/[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/xxx.xxx.xxx.xxx/g'            

      # Create client VM which will start benchmark
      - name: Create Client
        run: |-
          INTERNAL_IP=`gcloud compute instances list --filter="name=$FRONTEND_VM" --format='value(networkInterfaces[0].networkIP)'`
          gcloud compute instances create-with-container $CLIENT_VM \
            --machine-type=$MACHINE_TYPE \
            --scopes="userinfo-email,storage-rw" \
            --zone=$ZONE \
            --tags=benchmark-tag \
            --network=default \
            --container-image=gcr.io/$PROJECT_ID/$CLIENT_IMAGE:latest \
            --container-restart-policy=never \
            --container-env="BUCKET=$BUCKET,SERVER_HOST=${INTERNAL_IP},SERVER_PORT=8080,SIMULATIONS=$SIMULATIONS,INCREMENT=$INCREMENT,STEPS=$STEPS,DURATION=$DURATION,APP_NAME=$APP_NAME,PROTOCOL=$PROTOCOL" | \
          sed -E 's/[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}/xxx.xxx.xxx.xxx/g'

      # Wait for the results (one zip file for the application + gh-benchmark.json) (add 10 minutes for each test to let gatling be able to collect results)
      - name: Wait for test result
        run: |-
          nr_simulations=0
          for simulation in $(echo ${SIMULATIONS} | tr ";" "\n"); do
            nr_simulations=$(expr $nr_simulations + 1)
          done
          max_wait=$(expr $DURATION \* $nr_simulations)
          delta=$(expr 10 \* $nr_simulations)
          max_wait=$(expr $max_wait + $delta)
          ${SCRIPTS_DIR}/wait-for-gs-bucket-file.sh gs://$BUCKET/results/bench-$APP_NAME.tgz $max_wait
          gsutil cp gs://$BUCKET/results/bench-$APP_NAME.tgz .
          tar zxvf bench-$APP_NAME.tgz gh-benchmark.json

      # Compute performance trends and send an alert in case of performance regression
      - name: Generate trends report
        uses: benchmark-action/github-action-benchmark@v1.15.0
        with:
          name: Trends for ${{ env.APP_NAME }}
          tool: 'customBiggerIsBetter'
          output-file-path: ./gh-benchmark.json
          benchmark-data-dir-path: bench/${{ env.APP_NAME }}/Trends
          max-items-in-chart: 100
          auto-push: false
          alert-threshold: ${{ env.ALERT_THRESHOLD }}
          fail-threshold: ${{ env.ALERT_THRESHOLD }}
          fail-on-alert: true
          comment-on-alert: false
          github-token: ${{ env.GH_TOKEN }}

      - name: Prepare results
        run: |-
          . ${SCRIPTS_DIR}/libs.sh
          git checkout gh-pages
          tar zxvf bench-$APP_NAME.tgz
          rm -f bench.tgz
          update_benchmark_history bench/$APP_NAME/Trends/.history "${{ needs.init-benchmark.outputs.commits }}" 
          transform_benchmark_json_data bench/$APP_NAME/Trends/data.js "Trends for $APP_NAME" $JOB_URL $GITHUB_RUN_ID "${{ needs.init-benchmark.outputs.commits_diff }}" 
          cp -f ${SCRIPTS_DIR}/benchmark-index-template.html bench/$APP_NAME/Trends/index.html

      - name: Upload results
        uses: actions/upload-artifact@v3
        with:
          name: results-${{ env.APP_NAME }}
          path: bench/${{ env.APP_NAME }}
          if-no-files-found: warn
          retention-days: 90

      - name: Cleanup GCP resources
        if: always()
        run: |-
          set +e
          echo "Client logs:"
          container_id=$(gcloud compute ssh $CLIENT_VM --zone=$ZONE --project=$GCP_PROJECT --command "docker ps -a" | \
            tr '\r' '\n' | grep $CLIENT_VM | cut -d ' ' -f 1)
          gcloud compute ssh $CLIENT_VM --zone=$ZONE --project=$GCP_PROJECT --command "docker logs $container_id"
          echo "Deleting client"
          gcloud compute instances delete $CLIENT_VM --quiet --zone $ZONE | echo
          echo "Frontend logs:"
          container_id=$(gcloud compute ssh $FRONTEND_VM --zone=$ZONE --project=$GCP_PROJECT --command "docker ps -a" | \
            tr '\r' '\n' | grep $FRONTEND_VM | cut -d ' ' -f 1)
          gcloud compute ssh $FRONTEND_VM --zone=$ZONE --project=$GCP_PROJECT --command "docker logs $container_id"
          echo "Deleting frontend vm"
          gcloud compute instances delete $FRONTEND_VM --quiet --zone $ZONE | echo
          if [ -n $BACKEND_APP ]; then
            echo "Backend logs:"
            container_id=$(gcloud compute ssh $BACKEND_VM --zone=$ZONE --project=$GCP_PROJECT --command "docker ps -a" | \
              tr '\r' '\n' | grep $BACKEND_VM | cut -d ' ' -f 1)
            gcloud compute ssh $BACKEND_VM --zone=$ZONE --project=$GCP_PROJECT --command "docker logs $container_id"
            echo "Deleting backend vm"
            gcloud compute instances delete $BACKEND_VM --quiet --zone $ZONE | echo
          fi
          echo "Deleting files from bucket"
          gsutil rm -f gs://$BUCKET/apps/$FRONTEND_APP.jar | echo
          if [ -n $BACKEND_APP ]; then
            gsutil rm -f gs://$BUCKET/apps/$BACKEND_APP.jar | echo
          fi
          gsutil rm -f gs://$BUCKET/results/bench-$APP_NAME.tgz | echo

  commit-results:
    name: Store results in gh-pages
    runs-on: ubuntu-latest
    needs: [init-benchmark, run-benchmark]
    if: needs.init-benchmark.outputs.changed == 'true' || github.event.inputs.force-bench == 'true'
    env:
      CI_COMMIT_MESSAGE: Benchmarks
      CI_COMMIT_AUTHOR: ${{ github.event.repository.name }} Benchmarks
      CI_COMMIT_EMAIL: $GITHUB_TRIGGERING_ACTOR@users.noreply.github.com
    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v3
        with:
          ref: 'gh-pages'

      - name: Download results
        uses: actions/download-artifact@v3
        with:
          name: results-${{ env.APP_NAME }}
          path: tmp

      - name: Commit results
        id: commit-results
        run: |-
          ls tmp
          \cp -fR tmp/* .
          git config --global user.name "${{ env.CI_COMMIT_AUTHOR }}"
          git config --global user.email "${{ env.CI_COMMIT_EMAIL }}"
          git add bench
          git commit --allow-empty -m "${{ env.CI_COMMIT_MESSAGE }}"
          git push origin gh-pages:gh-pages
